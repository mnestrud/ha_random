blueprint:
  name: "Ataraxia Lighting - Inovelli Switch Taps (v0.9.7)"
  description: >
    Inovelli Blue 2-in-1 (Zigbee2MQTT) multi-tap blueprint.
    - Config single = Night (optional light target)
    - Config double = Day (optional light target)
    - Up/Down single = Adaptive helper control + optional Action (scene/script/light) + optional LED
    - Up/Down double & triple = optional Action (scene/script/light) + optional LED
    Notes:
    • Uses Home Assistant 2024.8+ “actions” style (service calls are now actions).
    • LED effect runs only when the chosen Effect is non-blank.
    • If an Action is a light, per-action "Light mode" lets you On/Off/Toggle that light.

  domain: automation
  author: mnestrud (edited by Home Assistant Assistant)
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/main/Ataraxia%20Inovelli%20Switch%20Automations
  homeassistant:
    min_version: 2024.8.0

  input:

    # ---- Switch
    inovelli_device:
      name: Inovelli switch (Zigbee2MQTT)
      selector:
        device:
          filter:
            - integration: mqtt
          multiple: false

    # ---- Lights (for Config buttons)
    light_group:
      name: Light target (single light or Zigbee group)
      default: []
      selector:
        entity:
          domain: light

    day_brightness:
      name: Daytime brightness (%)
      default: 80
      selector:
        number: {min: 1, max: 100, mode: slider, unit_of_measurement: "%"}

    day_color_temp_k:
      name: Daytime color temperature (K)
      default: 4000
      selector:
        number: {min: 2000, max: 6500, step: 50, unit_of_measurement: "K"}

    night_brightness:
      name: Nighttime brightness (%)
      default: 20
      selector:
        number: {min: 1, max: 100, mode: slider, unit_of_measurement: "%"}

    night_color_temp_k:
      name: Nighttime color temperature (K)
      default: 2700
      selector:
        number: {min: 1800, max: 4000, step: 50, unit_of_measurement: "K"}

    day_transition:
      name: Day transition (seconds)
      default: 0.4
      selector:
        number: {min: 0, max: 10, step: 0.1, unit_of_measurement: s}

    night_transition:
      name: Night transition (seconds)
      default: 0.4
      selector:
        number: {min: 0, max: 10, step: 0.1, unit_of_measurement: s}

    # ---- Adaptive Lighting
    adaptive_helper:
      name: Adaptive helper (input_boolean)
      default: []
      selector:
        entity:
          filter: {domain: input_boolean}

    adaptive_script:
      name: Adaptive script
      description: Accepts variable 'target_state' "ON"/"OFF"
      default: []
      selector:
        entity:
          filter: {domain: script}

    # ---- Actions (Scene / Script / Light) + per-action Light mode
    up_single_action:
      name: Up Single Action
      description: Optional action to run on up_single.
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    up_single_light_mode:
      name: Up Single • Light mode
      description: What to do if the Up Single Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    down_single_action:
      name: Down Single Action
      description: Optional action to run on down_single.
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    down_single_light_mode:
      name: Down Single • Light mode
      description: What to do if the Down Single Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    up_double_action:
      name: Up Double Action
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    up_double_light_mode:
      name: Up Double • Light mode
      description: What to do if the Up Double Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    down_double_action:
      name: Down Double Action
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    down_double_light_mode:
      name: Down Double • Light mode
      description: What to do if the Down Double Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    up_triple_action:
      name: Up Triple Action
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    up_triple_light_mode:
      name: Up Triple • Light mode
      description: What to do if the Up Triple Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    down_triple_action:
      name: Down Triple Action
      default: []
      selector:
        entity:
          filter:
            - domain: scene
            - domain: script
            - domain: light
    down_triple_light_mode:
      name: Down Triple • Light mode
      description: What to do if the Down Triple Action is a light
      default: "toggle"
      selector:
        select:
          options:
            - "on"
            - "off"
            - "toggle"

    # ---- LED script entity
    led_script:
      name: Inovelli LED effect script
      description: "Must accept: led, color, level, effect, duration, target"
      default: script.inovelli_blue_led_2025_1
      selector: {entity: {filter: {domain: script}}}

    # ---- Per-action LED configuration
    # Anchors: option lists (sourced from zanix blueprint).
    up_single_effect:
      name: up_single • Effect (blank = none)
      default: ""
      selector:
        select:
          custom_value: true
          options: &effects_opts
            - 'Off'
            - 'Clear'
            - 'Solid'
            - 'Aurora'
            - 'Slow Chase'
            - 'Chase'
            - 'Fast Chase'
            - 'Slow Blink'
            - 'Medium Blink'
            - 'Fast Blink'
            - 'Slow Falling'
            - 'Medium Falling'
            - 'Fast Falling'
            - 'Open/Close'
            - 'Pulse'
            - 'Slow Rising'
            - 'Medium Rising'
            - 'Fast Rising'
            - 'Slow Siren'
            - 'Fast Siren'
            - 'Small to Big'
    up_single_color:
      name: up_single • Color
      default: Pink
      selector:
        select:
          custom_value: true
          options: &color_opts
            - Red
            - Orange
            - Yellow
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Light Pink
            - Pink
            - White
    up_single_level:
      name: up_single • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    up_single_duration:
      name: up_single • Duration
      default: 10 Seconds
      selector:
        select:
          custom_value: true
          options: &duration_opts
            - 1 Second
            - 2 Seconds
            - 3 Seconds
            - 4 Seconds
            - 5 Seconds
            - 6 Seconds
            - 7 Seconds
            - 8 Seconds
            - 9 Seconds
            - 10 Seconds
            - 15 Seconds
            - 20 Seconds
            - 25 Seconds
            - 30 Seconds
            - 35 Seconds
            - 40 Seconds
            - 45 Seconds
            - 50 Seconds
            - 55 Seconds
            - 1 Minute
            - 2 Minutes
            - 3 Minutes
            - 4 Minutes
            - 5 Minutes
            - 6 Minutes
            - 7 Minutes
            - 8 Minutes
            - 9 Minutes
            - 10 Minutes
            - 15 Minutes
            - 20 Minutes
            - 25 Minutes
            - 30 Minutes
            - 35 Minutes
            - 40 Minutes
            - 45 Minutes
            - 50 Minutes
            - 55 Minutes
            - 1 Hour
            - 2 Hours
            - 3 Hours
            - 4 Hours
            - 5 Hours
            - 6 Hours
            - 7 Hours
            - 8 Hours
            - 9 Hours
            - 10 Hours
            - 15 Hours
            - 20 Hours
            - 1 Day
            - 2 Days
            - 3 Days
            - 4 Days
            - 5 Days
            - Indefinitely
            - Forever

    down_single_effect:
      name: down_single • Effect (blank = none)
      default: ""
      selector: {select: {custom_value: true, options: *effects_opts}}
    down_single_color:
      name: down_single • Color
      default: Pink
      selector: {select: {custom_value: true, options: *color_opts}}
    down_single_level:
      name: down_single • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    down_single_duration:
      name: down_single • Duration
      default: 10 Seconds
      selector: {select: {custom_value: true, options: *duration_opts}}

    up_double_effect:
      name: up_double • Effect (blank = none)
      default: ""
      selector: {select: {custom_value: true, options: *effects_opts}}
    up_double_color:
      name: up_double • Color
      default: Pink
      selector: {select: {custom_value: true, options: *color_opts}}
    up_double_level:
      name: up_double • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    up_double_duration:
      name: up_double • Duration
      default: 10 Seconds
      selector: {select: {custom_value: true, options: *duration_opts}}

    down_double_effect:
      name: down_double • Effect (blank = none)
      default: ""
      selector: {select: {custom_value: true, options: *effects_opts}}
    down_double_color:
      name: down_double • Color
      default: Pink
      selector: {select: {custom_value: true, options: *color_opts}}
    down_double_level:
      name: down_double • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    down_double_duration:
      name: down_double • Duration
      default: 10 Seconds
      selector: {select: {custom_value: true, options: *duration_opts}}

    up_triple_effect:
      name: up_triple • Effect (blank = none)
      default: ""
      selector: {select: {custom_value: true, options: *effects_opts}}
    up_triple_color:
      name: up_triple • Color
      default: Pink
      selector: {select: {custom_value: true, options: *color_opts}}
    up_triple_level:
      name: up_triple • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    up_triple_duration:
      name: up_triple • Duration
      default: 10 Seconds
      selector: {select: {custom_value: true, options: *duration_opts}}

    down_triple_effect:
      name: down_triple • Effect (blank = none)
      default: ""
      selector: {select: {custom_value: true, options: *effects_opts}}
    down_triple_color:
      name: down_triple • Color
      default: Pink
      selector: {select: {custom_value: true, options: *color_opts}}
    down_triple_level:
      name: down_triple • LED level (1–100)
      default: 50
      selector: {number: {min: 1, max: 100}}
    down_triple_duration:
      name: down_triple • Duration
      default: 10 Seconds
      selector: {select: {custom_value: true, options: *duration_opts}}

    # ---- Optional debug logging
    enable_debug_logging:
      name: Enable system log line (debug)
      default: false
      selector: {boolean: {}}

# ===== Variables
variables:
  switch_device: !input inovelli_device
  light_target: !input light_group
  adaptive_helper_entity: !input adaptive_helper
  adaptive_script_entity: !input adaptive_script

  action_up_single: !input up_single_action
  action_down_single: !input down_single_action
  action_up_double: !input up_double_action
  action_down_double: !input down_double_action
  action_up_triple: !input up_triple_action
  action_down_triple: !input down_triple_action

  mode_up_single: !input up_single_light_mode
  mode_down_single: !input down_single_light_mode
  mode_up_double: !input up_double_light_mode
  mode_down_double: !input down_double_light_mode
  mode_up_triple: !input up_triple_light_mode
  mode_down_triple: !input down_triple_light_mode

  led_script_entity: !input led_script
  debug_enabled: !input enable_debug_logging

  # derived
  led_target_light: >
    {{ device_entities(switch_device) | select('match', '^light\\.') | list | first }}
  is_adaptive_enabled: >
    {{ adaptive_helper_entity != [] and adaptive_script_entity != [] }}
  has_light_target: >
    {{ light_target != [] }}

  action_up_single_set: "{{ action_up_single != [] }}"
  action_down_single_set: "{{ action_down_single != [] }}"
  action_up_double_set: "{{ action_up_double != [] }}"
  action_down_double_set: "{{ action_down_double != [] }}"
  action_up_triple_set: "{{ action_up_triple != [] }}"
  action_down_triple_set: "{{ action_down_triple != [] }}"

  # per-action effects (for clean templating checks)
  eff_up_single: !input up_single_effect
  eff_down_single: !input down_single_effect
  eff_up_double: !input up_double_effect
  eff_down_double: !input down_double_effect
  eff_up_triple: !input up_triple_effect
  eff_down_triple: !input down_triple_effect

triggers:
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_single
    id: SCENE_NIGHT
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_double
    id: SCENE_DAY

  # renamed IDs for single taps (Adaptive Lighting)
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_single
    id: ACTION_UP_SINGLE_AL_LIVE
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_single
    id: ACTION_DOWN_SINGLE_AL_PRESTAGE
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_held
    id: STOP_ADAPT
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_held
    id: STOP_ADAPT

  # Double/Triple
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_double
    id: ACTION_UP_DOUBLE
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_double
    id: ACTION_DOWN_DOUBLE
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_triple
    id: ACTION_UP_TRIPLE
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_triple
    id: ACTION_DOWN_TRIPLE

conditions: []

actions:
  - choose:

      # ========== CONFIG BUTTON: DAY ==========
      - conditions: [{condition: trigger, id: SCENE_DAY}]
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_light_target }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ is_adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target: {entity_id: !input adaptive_helper}
              - action: light.turn_on
                target: {entity_id: !input light_group}
                data:
                  brightness_pct: !input day_brightness
                  color_temp_kelvin: !input day_color_temp_k
                  transition: !input day_transition

      # ========== CONFIG BUTTON: NIGHT ==========
      - conditions: [{condition: trigger, id: SCENE_NIGHT}]
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_light_target }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ is_adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target: {entity_id: !input adaptive_helper}
              - action: light.turn_on
                target: {entity_id: !input light_group}
                data:
                  brightness_pct: !input night_brightness
                  color_temp_kelvin: !input night_color_temp_k
                  transition: !input night_transition

      # ========== ADAPTIVE: LIVE / PRESTAGE / STOP (LED only if effect set) + optional Single Actions ==========
      - conditions:
          - condition: trigger
            id: [ACTION_UP_SINGLE_AL_LIVE, ACTION_DOWN_SINGLE_AL_PRESTAGE, STOP_ADAPT]
        sequence:
          # LED for up_single / down_single (only if effect non-blank and target exists)
          - choose:
              - conditions: [{condition: trigger, id: ACTION_UP_SINGLE_AL_LIVE}]
                sequence:
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_up_single | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input up_single_color
                          level: !input up_single_level
                          effect: "{{ eff_up_single }}"
                          duration: !input up_single_duration
                          target: {entity_id: "{{ led_target_light }}"}
              - conditions: [{condition: trigger, id: ACTION_DOWN_SINGLE_AL_PRESTAGE}]
                sequence:
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_down_single | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input down_single_color
                          level: !input down_single_level
                          effect: "{{ eff_down_single }}"
                          duration: !input down_single_duration
                          target: {entity_id: "{{ led_target_light }}"}

          # Adaptive helper/script control
          - if:
              - condition: template
                value_template: "{{ is_adaptive_enabled }}"
            then:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: >
                          {{ trigger.id in ['ACTION_UP_SINGLE_AL_LIVE','ACTION_DOWN_SINGLE_AL_PRESTAGE']
                             and is_state(adaptive_helper_entity, 'off') }}
                    sequence:
                      - action: input_boolean.turn_on
                        target: {entity_id: !input adaptive_helper}
                      - delay: {milliseconds: 500}
                      - choose:
                          - conditions: [{condition: trigger, id: ACTION_UP_SINGLE_AL_LIVE}]
                            sequence:
                              - action: script.turn_on
                                target: {entity_id: !input adaptive_script}
                                data:
                                  variables: {target_state: "ON"}
                          - conditions: [{condition: trigger, id: ACTION_DOWN_SINGLE_AL_PRESTAGE}]
                            sequence:
                              - action: script.turn_on
                                target: {entity_id: !input adaptive_script}
                                data:
                                  variables: {target_state: "OFF"}
                  - conditions:
                      - condition: trigger
                        id: STOP_ADAPT
                    sequence:
                      - action: input_boolean.turn_off
                        target: {entity_id: !input adaptive_helper}

          # Optional SINGLE actions (scene/script/light)
          - choose:
              - conditions:
                  - condition: trigger
                    id: ACTION_UP_SINGLE_AL_LIVE
                  - condition: template
                    value_template: "{{ action_up_single_set }}"
                sequence:
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_up_single | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input up_single_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_single | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input up_single_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_single | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_up_single == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input up_single_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_single == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input up_single_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_single == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input up_single_action}

              - conditions:
                  - condition: trigger
                    id: ACTION_DOWN_SINGLE_AL_PRESTAGE
                  - condition: template
                    value_template: "{{ action_down_single_set }}"
                sequence:
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_down_single | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input down_single_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_single | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input down_single_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_single | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_down_single == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input down_single_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_single == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input down_single_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_single == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input down_single_action}

      # ========== ACTIONS (Double/Triple) + per-action LED ==========
      - conditions:
          - condition: trigger
            id: [ACTION_UP_DOUBLE, ACTION_DOWN_DOUBLE, ACTION_UP_TRIPLE, ACTION_DOWN_TRIPLE]
        sequence:

          - choose:

              # UP double
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'ACTION_UP_DOUBLE' and action_up_double_set }}"
                sequence:
                  - if: [{condition: template, value_template: "{{ debug_enabled }}"}]
                    then:
                      - action: system_log.write
                        data: {message: "Up Double Action", level: info}
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_up_double | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input up_double_color
                          level: !input up_double_level
                          effect: "{{ eff_up_double }}"
                          duration: !input up_double_duration
                          target: {entity_id: "{{ led_target_light }}"}
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_up_double | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input up_double_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_double | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input up_double_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_double | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_up_double == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input up_double_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_double == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input up_double_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_double == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input up_double_action}

              # DOWN double
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'ACTION_DOWN_DOUBLE' and action_down_double_set }}"
                sequence:
                  - if: [{condition: template, value_template: "{{ debug_enabled }}"}]
                    then:
                      - action: system_log.write
                        data: {message: "Down Double Action", level: info}
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_down_double | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input down_double_color
                          level: !input down_double_level
                          effect: "{{ eff_down_double }}"
                          duration: !input down_double_duration
                          target: {entity_id: "{{ led_target_light }}"}
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_down_double | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input down_double_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_double | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input down_double_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_double | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_down_double == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input down_double_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_double == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input down_double_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_double == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input down_double_action}

              # UP triple
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'ACTION_UP_TRIPLE' and action_up_triple_set }}"
                sequence:
                  - if: [{condition: template, value_template: "{{ debug_enabled }}"}]
                    then:
                      - action: system_log.write
                        data: {message: "Up Triple Action", level: info}
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_up_triple | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input up_triple_color
                          level: !input up_triple_level
                          effect: "{{ eff_up_triple }}"
                          duration: !input up_triple_duration
                          target: {entity_id: "{{ led_target_light }}"}
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_up_triple | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input up_triple_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_triple | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input up_triple_action}
                      - conditions: [{condition: template, value_template: "{{ (action_up_triple | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_up_triple == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input up_triple_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_triple == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input up_triple_action}
                              - conditions: [{condition: template, value_template: "{{ mode_up_triple == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input up_triple_action}

              # DOWN triple
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'ACTION_DOWN_TRIPLE' and action_down_triple_set }}"
                sequence:
                  - if: [{condition: template, value_template: "{{ debug_enabled }}"}]
                    then:
                      - action: system_log.write
                        data: {message: "Down Triple Action", level: info}
                  - if:
                      - condition: template
                        value_template: >
                          {{ (eff_down_triple | string | trim) != '' and (led_target_light | string | trim) != '' }}
                    then:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: !input down_triple_color
                          level: !input down_triple_level
                          effect: "{{ eff_down_triple }}"
                          duration: !input down_triple_duration
                          target: {entity_id: "{{ led_target_light }}"}
                  - choose:
                      - conditions: [{condition: template, value_template: "{{ (action_down_triple | string)[:7] == 'script.' }}"}]
                        sequence:
                          - action: script.turn_on
                            target: {entity_id: !input down_triple_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_triple | string)[:6] == 'scene.' }}"}]
                        sequence:
                          - action: scene.turn_on
                            target: {entity_id: !input down_triple_action}
                      - conditions: [{condition: template, value_template: "{{ (action_down_triple | string)[:6] == 'light.' }}"}]
                        sequence:
                          - choose:
                              - conditions: [{condition: template, value_template: "{{ mode_down_triple == 'on' }}"}]
                                sequence:
                                  - action: light.turn_on
                                    target: {entity_id: !input down_triple_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_triple == 'off' }}"}]
                                sequence:
                                  - action: light.turn_off
                                    target: {entity_id: !input down_triple_action}
                              - conditions: [{condition: template, value_template: "{{ mode_down_triple == 'toggle' }}"}]
                                sequence:
                                  - action: light.toggle
                                    target: {entity_id: !input down_triple_action}

mode: queued
max: 3
