blueprint:
  name: Ataraxia Lighting – Hue Defaults (v1.00)
  description: >
    For Hue bulbs via Zigbee2MQTT. Applies:
      • Reporting (strict, per-attribute on endpoint 11): OnOff.onOff, LevelCtrl.currentLevel, LightingColorCtrl.colorTemperature
      • Device options (bridge): state_action, color_sync, transition
      • Light defaults (/set): power_on_behavior, color_temp_startup,
        color_options.execute_if_off, level_config.execute_if_off,
        color_mode=color_temp, effect=null
    Adds a configurable pause between commands to avoid Zigbee congestion.
  domain: script
  author: mnestrud
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/refs/heads/main/Ataraxia%20Lighting%20-%20Hue%20Defaults

  input:
    target_devices:
      name: Hue bulbs (Zigbee2MQTT)
      selector:
        device:
          multiple: true
          filter:
            - integration: mqtt

    # DEVICE OPTIONS (EXPOSED)
    state_action:
      name: state_action (device option)
      default: false
      selector:
        boolean:

    color_sync:
      name: color_sync (device option)
      default: true
      selector:
        boolean:

    transition:
      name: Default transition (seconds, device option)
      description: Min 0; max 5.0.
      default: 0.4
      selector:
        number:
          min: 0
          max: 5
          step: 0.1
          mode: slider

    # LIGHT DEFAULTS (ONLY EXPOSE power_on_behavior)
    power_on_behavior:
      name: Power-on behavior
      default: previous
      selector:
        select:
          mode: dropdown
          options:
            - previous
            - "on"
            - "off"

    pause_seconds:
      name: Pause between MQTT publishes (seconds)
      description: Delay between each Zigbee2MQTT command and between devices.
      default: 0.5
      selector:
        number:
          min: 0
          max: 5
          step: 0.1
          mode: slider

    configure_reporting:
      name: Configure strict reporting (endpoint 11)
      description: Sends 3 configure_reporting calls per device.
      default: true
      selector:
        boolean:

# Hidden defaults (constants)
variables:
  _color_options_execute_if_off: true
  _level_config_execute_if_off: true
  _color_temp_startup_default: 370

  # Bind blueprint inputs to internal variables
  _devices: !input target_devices
  in_state_action: !input state_action
  in_color_sync: !input color_sync
  in_transition: !input transition
  in_power_on_behavior: !input power_on_behavior
  in_pause_seconds: !input pause_seconds
  in_configure_reporting: !input configure_reporting

  # Safe slice of devices for the loop
  _devices_200: "{{ (_devices | default([], true))[:200] }}"

mode: parallel
max: 50

sequence:
  - repeat:
      for_each: "{{ _devices_200 }}"
      sequence:
        - variables:
            _dev_id: "{{ repeat.item }}"
            _name: >-
              {{ device_attr(_dev_id, 'name') or device_attr(_dev_id, 'name_by_user') or _dev_id }}
            _set_topic: "zigbee2mqtt/{{ _name }}/set"
            _req_devopts_topic: "zigbee2mqtt/bridge/request/device/options"
            _req_cfgrep_topic: "zigbee2mqtt/bridge/request/device/configure_reporting"

        # 0) Strict REPORTING (endpoint 11): onOff, currentLevel, colorTemperature
        - choose:
            - conditions: "{{ in_configure_reporting }}"
              sequence:
                # OnOff.onOff  (min 0, max 10800, change 0)
                - action: mqtt.publish
                  data:
                    topic: "{{ _req_cfgrep_topic }}"
                    payload: "{{ {
                      'id': _name,
                      'endpoint': 11,
                      'cluster': 'genOnOff',
                      'attribute': 'onOff',
                      'minimum_report_interval': 0,
                      'maximum_report_interval': 10800,
                      'reportable_change': 0
                    } | tojson }}"
                - delay:
                    seconds: "{{ in_pause_seconds }}"

                # LevelCtrl.currentLevel (min 0, max 10800, change 1)
                - action: mqtt.publish
                  data:
                    topic: "{{ _req_cfgrep_topic }}"
                    payload: "{{ {
                      'id': _name,
                      'endpoint': 11,
                      'cluster': 'genLevelCtrl',
                      'attribute': 'currentLevel',
                      'minimum_report_interval': 0,
                      'maximum_report_interval': 10800,
                      'reportable_change': 1
                    } | tojson }}"
                - delay:
                    seconds: "{{ in_pause_seconds }}"

                # LightingColorCtrl.colorTemperature (min 0, max 10800, change 1)
                - action: mqtt.publish
                  data:
                    topic: "{{ _req_cfgrep_topic }}"
                    payload: "{{ {
                      'id': _name,
                      'endpoint': 11,
                      'cluster': 'lightingColorCtrl',
                      'attribute': 'colorTemperature',
                      'minimum_report_interval': 0,
                      'maximum_report_interval': 10800,
                      'reportable_change': 1
                    } | tojson }}"
                - delay:
                    seconds: "{{ in_pause_seconds }}"

        # 1) Device options via bridge
        - action: mqtt.publish
          data:
            topic: "{{ _req_devopts_topic }}"
            payload: "{{ {
              'id': _name,
              'options': {
                'transition': in_transition,
                'color_sync': in_color_sync,
                'state_action': in_state_action
              }
            } | tojson }}"
        - delay:
            seconds: "{{ in_pause_seconds }}"

        # 2) Light defaults via /set
        - action: mqtt.publish
          data:
            topic: "{{ _set_topic }}"
            payload: "{{ {
              'power_on_behavior': in_power_on_behavior,
              'color_temp_startup': _color_temp_startup_default,
              'color_options': {'execute_if_off': _color_options_execute_if_off},
              'level_config': {'execute_if_off': _level_config_execute_if_off}
            } | tojson }}"
        - delay:
            seconds: "{{ in_pause_seconds }}"
