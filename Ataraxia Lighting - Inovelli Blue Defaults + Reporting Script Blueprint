blueprint:
  name: Ataraxia Lighting - Inovelli Blue Defaults (v0.5.5)
  description: >
    Sets all parameters exposed in Z2M JSON for Inovelli Blue dimmers.
    Uses a key=value list with defaults prefilled from Inovelli docs and
    your JSON. Sends blanks as null (does not skip). Removes read-only
    powerType, switchType, and dimmingMode.
    Also resets and reapplies reporting for OnOff/LevelCtrl/defaultLevelLocal/defaultLevelRemote.
    Requires Home Assistant 2024.8+ (actions syntax).

  domain: script

  input:
    devices_multiline:
      name: Zigbee2MQTT device names (one per line)
      description: Exact friendly names as in zigbee2mqtt/<name>/set.
      selector:
        text:
          multiline: true

    all_params_text:
      name: All parameters (key = value) – edit as needed
      description: >
        One parameter per line as `key = value`. Blank values are sent as null.
        Unknown keys are ignored. Read-only removed: powerType, switchType, dimmingMode.
      default: |
        dimmingSpeedUpRemote = 50
        dimmingSpeedUpLocal = 127
        rampRateOffToOnRemote = 0
        rampRateOffToOnLocal = 0
        dimmingSpeedDownRemote = 127
        dimmingSpeedDownLocal = 127
        rampRateOnToOffRemote = 0
        rampRateOnToOffLocal = 0

        minimumLevel = 1
        maximumLevel = 255
        invertSwitch = No
        autoTimerOff = 0
        stateAfterPowerRestored = 255
        loadLevelIndicatorTimeout = 11

        activePowerReports = 0
        periodicPowerAndEnergyReports = 0
        activeEnergyReports = 0

        smartBulbMode = Smart Bulb Mode
        doubleTapUpToParam55 = Disabled
        doubleTapDownToParam56 = Disabled
        brightnessLevelForDoubleTapUp = 254
        brightnessLevelForDoubleTapDown = 2
        doubleTapClearNotifications = Disabled
        singleTapBehavior = Old Behavior

        ledColorWhenOn = 170
        ledColorWhenOff = 170
        ledIntensityWhenOn = 33
        ledIntensityWhenOff = 1
        ledBarScaling = Gen3 method (VZM-style)

        defaultLevelLocal = 255
        defaultLevelRemote = 255

        buttonDelay = 300ms
        localProtection = Disabled
        remoteProtection = Disabled
        relayClick = Enabled (Click Sound Off)
        firmwareUpdateInProgressIndicator = Enabled

        bindingOffToOnSyncLevel = Disabled
        auxSwitchUniqueScenes = Disabled
        higherOutputInNonNeutral = Disabled (default)

        onOffLedMode = All
        outputMode = Dimmer

        quickStartLevel = 254
        quickStartTime = 0

        level_config.execute_if_off = true

        # Per-LED segment defaults (0–101). Blank means send null.
        defaultLed1ColorWhenOn =
        defaultLed1ColorWhenOff =
        defaultLed1IntensityWhenOn =
        defaultLed1IntensityWhenOff =
        defaultLed2ColorWhenOn =
        defaultLed2ColorWhenOff =
        defaultLed2IntensityWhenOn =
        defaultLed2IntensityWhenOff =
        defaultLed3ColorWhenOn =
        defaultLed3ColorWhenOff =
        defaultLed3IntensityWhenOn =
        defaultLed3IntensityWhenOff =
        defaultLed4ColorWhenOn =
        defaultLed4ColorWhenOff =
        defaultLed4IntensityWhenOn =
        defaultLed4IntensityWhenOff =
        defaultLed5ColorWhenOn =
        defaultLed5ColorWhenOff =
        defaultLed5IntensityWhenOn =
        defaultLed5IntensityWhenOff =
        defaultLed6ColorWhenOn =
        defaultLed6ColorWhenOff =
        defaultLed6IntensityWhenOn =
        defaultLed6IntensityWhenOff =
        defaultLed7ColorWhenOn =
        defaultLed7ColorWhenOff =
        defaultLed7IntensityWhenOn =
        defaultLed7IntensityWhenOff =

        fanControlMode = Disabled
        fanLedLevelType = 0
        highLevelForFanControlMode =
        mediumLevelForFanControlMode =
        lowLevelForFanControlMode =
        ledColorForFanControlMode =

mode: single

variables:
  devices_raw: !input devices_multiline
  params_raw: !input all_params_text

  # Parse device names
  device_names: >
    {{ devices_raw.splitlines() | map('trim') | reject('equalto','') | list | unique | list }}
  device_names_limited: >
    {{ device_names[:20] }}

  # Parse params into dict; blanks become null
  parsed_params: >
    {% set out = dict() %}
    {% for line in params_raw.splitlines() %}
      {% set l = line.strip() %}
      {% if not l or l.startswith('#') %}
        {% continue %}
      {% endif %}
      {% set parts = l.split('=', 1) %}
      {% if parts|length == 2 %}
        {% set k = parts[0].strip() %}
        {% set v = parts[1].strip() %}
        {% set val = (none if v == '' else v) %}
        {% set out = dict(out, **{k: val}) %}
      {% endif %}
    {% endfor %}
    {{ out }}

  desired_common: "{{ parsed_params }}"

sequence:
  - variables:
      report: >
        {% if device_names_limited|length == 0 %}
        No device names provided.
        {% else %}
        Starting updates for {{ device_names_limited|length }} device(s)...
        {% endif %}

  - repeat:
      for_each: "{{ device_names_limited }}"
      sequence:
        - variables:
            dev_name: "{{ repeat.item }}"
            desired: "{{ desired_common }}"
            txn_base: "{{ dev_name ~ '_' ~ (now().timestamp()|int) }}"

        # --- Reset reporting ---
        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='genOnOff', attribute='onOff',
                      minimum_report_interval=0, maximum_report_interval=65535,
                      reportable_change=0, transaction=txn_base ~ '_onoff_disable') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='genLevelCtrl', attribute='currentLevel',
                      minimum_report_interval=0, maximum_report_interval=65535,
                      reportable_change=1, transaction=txn_base ~ '_level_disable') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='manuSpecificInovelli', attribute='defaultLevelLocal',
                      minimum_report_interval=0, maximum_report_interval=65535,
                      reportable_change=1, transaction=txn_base ~ '_dll_disable') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='manuSpecificInovelli', attribute='defaultLevelRemote',
                      minimum_report_interval=0, maximum_report_interval=65535,
                      reportable_change=1, transaction=txn_base ~ '_dlr_disable') | tojson }}

        # --- Apply reporting ---
        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='genOnOff', attribute='onOff',
                      minimum_report_interval=0, maximum_report_interval=10800,
                      reportable_change=0, transaction=txn_base ~ '_onoff_set') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='genLevelCtrl', attribute='currentLevel',
                      minimum_report_interval=5, maximum_report_interval=10800,
                      reportable_change=1, transaction=txn_base ~ '_level_set') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='manuSpecificInovelli', attribute='defaultLevelLocal',
                      minimum_report_interval=0, maximum_report_interval=10800,
                      reportable_change=1, transaction=txn_base ~ '_dll_set') | tojson }}

        - action: mqtt.publish
          data:
            topic: zigbee2mqtt/bridge/request/device/configure_reporting
            payload: >
              {{ dict(id=dev_name, endpoint=1, cluster='manuSpecificInovelli', attribute='defaultLevelRemote',
                      minimum_report_interval=0, maximum_report_interval=10800,
                      reportable_change=1, transaction=txn_base ~ '_dlr_set') | tojson }}

        # --- Send parameters (always full dict, including nulls) ---
        - action: mqtt.publish
          data:
            topic: "zigbee2mqtt/{{ dev_name }}/set"
            qos: 0
            retain: false
            payload: "{{ desired | tojson }}"

        - action: logbook.log
          data:
            name: "Inovelli Params"
            message: "{{ dev_name }}: full parameter set pushed ({{ desired|length }} keys)."

  - action: persistent_notification.create
    data:
      title: "Inovelli Blue – Results"
      message: >
        Finished processing {{ device_names_limited|length }} device(s).
        See Logbook for details.
