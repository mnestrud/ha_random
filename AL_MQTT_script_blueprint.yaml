blueprint:
  name: Ataraxia Lighting Script
  domain: script
  author: mnestrud
  input:
    al_switch:
      name: Adaptive Lighting switch
      description: Adaptive Lighting Switch entity providing brightness_pct & color_temp_kelvin attributes
      selector:
        entity:
          domain: switch
    inovelli_set_topic:
      name: Light Switch - Zigbee2MQTT /set topic (Inovelli Blue)
      description: e.g. "zigbee2mqtt/Primary Bedroom Overhead Light Switch/set" - May be blank.
      default: ""
      selector:
        text:
    group_set_topic:
      name: Light Group or Individual Light - Zigbee2MQTT /set topic.
      description: e.g. "zigbee2mqtt/zgb_primary_bedroom/set" - May be blank.
      default: ""
      selector:
        text:
    # === New (optional) ===
    inovelli_entity:
      name: Inovelli entity (optional)
      description: HA entity used to read current brightness & default levels. Leave blank to skip check.
      default: ""
      selector:
        entity:
          multiple: false
          # Typically a light entity discovered by Z2M
          domain: light
    group_light_entity:
      name: Light group / light entity (optional)
      description: HA entity used to read current brightness & color_temp. Leave blank to skip check.
      default: ""
      selector:
        entity:
          multiple: false
          domain: light

# ---------- Script body ----------
alias: AL Bedroom Overhead
mode: single
fields:
  target_state:
    description: "\"ON\" or \"OFF\" (required)"
    example: "ON"
  brightness_pct:
    description: Optional brightness percent (0–100). Falls back to AL dummy switch.
    example: 72
  color_temp_kelvin:
    description: Optional color temp in Kelvin. Falls back to AL dummy switch.
    example: 2700
sequence:
  - variables:
      # Blueprint inputs
      al_sw: !input al_switch
      inovelli_topic: !input inovelli_set_topic
      group_topic: !input group_set_topic
      inovelli_ent: !input inovelli_entity
      group_ent: !input group_light_entity

      pct: >-
        {% set p = brightness_pct | default(None) %}
        {% if p is number %}{{ p | int }}
        {% else %}{{ state_attr(al_sw,'brightness_pct') | int(50) }}
        {% endif %}
      kelvin: >-
        {% set k = color_temp_kelvin | default(None) %}
        {% if k is number %}{{ k | float }}
        {% else %}{{ state_attr(al_sw,'color_temp_kelvin') | float(2700) }}
        {% endif %}
      bri_raw: "{{ (pct * 254 / 100) | round(0) | int }}"
      bri: "{{ [ [ bri_raw, 1 ] | max, 254 ] | min }}"
      mired_raw: "{{ (1000000 / kelvin) | round(0) | int }}"
      mired: "{{ [ [ mired_raw, 153 ] | max, 500 ] | min }}"
      target_state_norm: "{{ target_state | upper }}"
      # Always compute desired states
      state_for_inovelli: >-
        {{ "ON" if target_state_norm == "ON" else "OFF" }}
      state_for_lights: >-
        {{ target_state_norm if target_state_norm == "ON" else None }}

      # ---------- Current values for "already correct?" checks ----------
      # Inovelli current values (try both camelCase and snake_case attribute names)
      _inv_bri: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'brightness')
             | default(state_attr(inovelli_ent, 'brightness_pct'), true) }}
        {% else %}{{ None }}{% endif %}
      _inv_dll: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'defaultLevelLocal')
             | default(state_attr(inovelli_ent, 'default_level_local'), true) }}
        {% else %}{{ None }}{% endif %}
      _inv_dlr: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'defaultLevelRemote')
             | default(state_attr(inovelli_ent, 'default_level_remote'), true) }}
        {% else %}{{ None }}{% endif %}
      # Normalize any percentage-like brightness to 0..254 if needed
      inv_bri_norm: >-
        {% set v = _inv_bri %}
        {% if v is number and v <= 1 %}{{ (v * 254) | round(0) | int }}
        {% elif v is number and v <= 100 and v == v | int %}{{ (v * 254 / 100) | round(0) | int }}
        {% else %}{{ v }}{% endif %}

      # "All three match?" → skip Inovelli publish
      inovelli_already_correct: >-
        {% if inovelli_ent | string | length == 0 %}
          false
        {% else %}
          {{ (inv_bri_norm is number and inv_bri_norm == bri)
             and (_inv_dll is number and _inv_dll == bri)
             and (_inv_dlr is number and _inv_dlr == bri) }}
        {% endif %}

      # Group/light current values
      grp_bri: >-
        {% if group_ent | string | length > 0 %}
          {{ state_attr(group_ent, 'brightness') }}
        {% else %}{{ None }}{% endif %}
      grp_ct: >-
        {% if group_ent | string | length > 0 %}
          {{ state_attr(group_ent, 'color_temp') }}
        {% else %}{{ None }}{% endif %}

      # Both brightness & color_temp match? → skip group publish
      group_already_correct: >-
        {% if group_ent | string | length == 0 %}
          false
        {% else %}
          {{ (grp_bri is number and grp_bri == bri)
             and (grp_ct is number and grp_ct == mired) }}
        {% endif %}

  # Publish to Inovelli only if topic is non-blank AND values are not already correct
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (inovelli_topic | string | trim) | length > 0 }}"
          - condition: template
            value_template: "{{ not inovelli_already_correct }}"
        sequence:
          - action: mqtt.publish
            data:
              topic: "{{ inovelli_topic }}"
              qos: 0
              retain: false
              payload: |-
                {{
                  {
                    "level_config": {"execute_if_off": true},
                    "defaultLevelLocal": bri,
                    "defaultLevelRemote": bri,
                    "brightness": bri,
                    "state": state_for_inovelli
                  } | tojson
                }}

  # Delay only if BOTH topics are non-blank
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ (inovelli_topic | string | trim) | length > 0 and
                 (group_topic | string | trim) | length > 0 }}
        sequence:
          - delay: "00:00:01"

  # Publish to Zigbee2MQTT group only if topic is non-blank AND values are not already correct
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (group_topic | string | trim) | length > 0 }}"
          - condition: template
            value_template: "{{ not group_already_correct }}"
        sequence:
          - action: mqtt.publish
            data:
              topic: "{{ group_topic }}"
              qos: 0
              retain: false
              payload: |-
                {{
                  {
                    "state": state_for_lights,
                    "level_config": {"execute_if_off": true},
                    "color_options": {"execute_if_off": true},
                    "brightness": bri,
                    "color_temp": mired
                  } | tojson
                }}
