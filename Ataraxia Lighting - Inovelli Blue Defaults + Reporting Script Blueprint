blueprint:
  name: Ataraxia Lighting - Inovelli Blue Defaults (v0.8.0)
  description: >
    Sets Inovelli Blue parameters using Home Assistant config entities
    (number/select) with actions (HA 2024.8+). Only reporting is configured via MQTT.
    Provide up to 20 devices; one shared set of config values applied to all.
    Defaults are read live from a reference device's current entity states.
    Optionally override any value using a single YAML mapping.
  domain: script

  # 2024.8+: service calls are actions
  # https://www.home-assistant.io/blog/2024/08/07/release-20248/

  input:
    # --- Devices ---
    reference_device:
      name: Reference device (for defaults)
      description: "We'll read this device's current config entity values as defaults."
      selector:
        device:
          filter:
            - integration: mqtt

    target_devices:
      name: Target devices (up to 20)
      description: "Pick up to 20 Inovelli Blue switches/dimmers."
      selector:
        device:
          multiple: true
          filter:
            - integration: mqtt
      default: []

    # --- Master toggles ---
    send_reporting:
      name: Configure Zigbee reporting (MQTT)
      description: "If enabled, reset and re-apply reporting (OnOff, LevelCtrl, defaultLevelLocal/Remote) via MQTT."
      default: true
      selector:
        boolean: {}

    push_parameters:
      name: Push parameters to config entities
      description: "If enabled, set number/select entities on each device to the desired values."
      default: true
      selector:
        boolean: {}

    # --- Optional overrides (shared for all devices) ---
    overrides_yaml:
      name: Overrides (YAML mapping)
      description: >
        Optional; provide key: value pairs to override defaults read from the reference device.
        Keys are the parameter names listed below (e.g., dimmingSpeedUpRemote: 0).
        For selects, use the option label (e.g., invertSwitch: "No").
      default: ""
      selector:
        text:
          multiline: true

    # --- Optional extras for reporting timing (leave as-is for sane defaults) ---
    reporting_min_interval:
      name: Reporting min interval (seconds)
      default: 5
      selector:
        number:
          min: 0
          max: 3600
          step: 1
    reporting_max_interval:
      name: Reporting max interval (seconds)
      default: 10800
      selector:
        number:
          min: 60
          max: 21600
          step: 60

mode: parallel
max: 50

# ---------------- Variables: build desired config dict ----------------
variables:
  ref_dev: !input reference_device
  tgt_devs: !input target_devices
  send_reporting: !input send_reporting
  push_parameters: !input push_parameters
  overrides_yaml: !input overrides_yaml
  rpt_min: !input reporting_min_interval
  rpt_max: !input reporting_max_interval

  # Helper: return first entity on a device that matches domain + suffix
  find_entity: >-
    {% macro find_entity(dev_id, domain, suffix) -%}
    {%- set ents = device_entities(dev_id)
        | select('match', '^' ~ domain ~ '\\.')
        | select('endswith', '_' ~ suffix)
        | list -%}
    {{ ents[0] if ents|length > 0 else none }}
    {%- endmacro -%}
    {{ find_entity }}

  # Base param map: key -> (domain, suffix)
  base_params: >-
    {{ [
      ('dimmingSpeedUpRemote',         'number', 'dimmingspeedupremote'),
      ('dimmingSpeedUpLocal',          'number', 'dimmingspeeduplocal'),
      ('rampRateOffToOnRemote',        'number', 'ramprateofftoonremote'),
      ('rampRateOffToOnLocal',         'number', 'ramprateofftoonlocal'),
      ('dimmingSpeedDownRemote',       'number', 'dimmingspeeddownremote'),
      ('dimmingSpeedDownLocal',        'number', 'dimmingspeeddownlocal'),
      ('rampRateOnToOffRemote',        'number', 'ramprateontooffremote'),
      ('rampRateOnToOffLocal',         'number', 'ramprateontoofflocal'),
      ('minimumLevel',                 'number', 'minimumlevel'),
      ('maximumLevel',                 'number', 'maximumlevel'),
      ('invertSwitch',                 'select', 'invertswitch'),
      ('autoTimerOff',                 'number', 'autotimeroff'),
      ('stateAfterPowerRestored',      'number', 'stateafterpowerrestored'),
      ('loadLevelIndicatorTimeout',    'select', 'loadlevelindicatortimeout'),

      ('smartBulbMode',                'select', 'smartbulbmode'),
      ('doubleTapUpToParam55',         'select', 'doubletapuptoparam55'),
      ('doubleTapDownToParam56',       'select', 'doubletapdowntoparam56'),
      ('brightnessLevelForDoubleTapUp','number', 'brightnesslevelfordoubletapup'),
      ('brightnessLevelForDoubleTapDown','number','brightnesslevelfordoubletapdown'),

      ('singleTapBehavior',            'select', 'singletapbehavior'),
      ('buttonDelay',                  'select', 'buttondelay'),

      ('ledColorWhenOn',               'number', 'ledcolorwhenon'),
      ('ledColorWhenOff',              'number', 'ledcolorwhenoff'),
      ('ledIntensityWhenOn',           'number', 'ledintensitywhenon'),
      ('ledIntensityWhenOff',          'number', 'ledintensitywhenoff'),

      ('defaultLevelLocal',            'number', 'defaultlevellocal'),
      ('defaultLevelRemote',           'number', 'defaultlevelremote'),

      ('localProtection',              'select', 'localprotection'),
      ('bindingOffToOnSyncLevel',      'select', 'bindingofftoonsynclevel'),
      ('firmwareUpdateInProgressIndicator', 'select', 'firmwareupdateinprogressindicator'),

      # Fan control
      ('fanControlMode',               'select', 'fancontrolmode'),
      ('lowLevelForFanControlMode',    'number', 'lowlevelforfancontrolmode'),
      ('mediumLevelForFanControlMode', 'number', 'mediumlevelforfancontrolmode'),
      ('highLevelForFanControlMode',   'number', 'highlevelforfancontrolmode'),
      ('ledColorForFanControlMode',    'number', 'ledcolorforfancontrolmode'),

      # Optional extras that may exist depending on firmware
      ('onOffLedMode',                 'select', 'onoffledmode'),
      ('outputMode',                   'select', 'outputmode'),
      ('quickStartLevel',              'number', 'quickstartlevel'),
      ('quickStartTime',               'number', 'quickstarttime')
    ] }}

  # LED segment params (1..7) auto-generated
  led_params: >-
    {% set out = [] %}
    {% for i in range(1,8) %}
      {% set _ = out.append(('defaultLed' ~ i ~ 'ColorWhenOn',  'number', 'defaultled' ~ i ~ 'colorwhenon')) %}
      {% set _ = out.append(('defaultLed' ~ i ~ 'ColorWhenOff', 'number', 'defaultled' ~ i ~ 'colorwhenoff')) %}
      {% set _ = out.append(('defaultLed' ~ i ~ 'IntensityWhenOn',  'number', 'defaultled' ~ i ~ 'intensitywhenon')) %}
      {% set _ = out.append(('defaultLed' ~ i ~ 'IntensityWhenOff', 'number', 'defaultled' ~ i ~ 'intensitywhenoff')) %}
    {% endfor %}
    {{ out }}

  # Merge base + LED params
  all_params: >-
    {{ base_params + led_params }}

  # Build defaults from reference device current states
  defaults_from_reference: >-
    {% set d = dict() %}
    {% for key, domain, suffix in all_params %}
      {% set ent = find_entity(ref_dev, domain, suffix) %}
      {% if ent %}
        {% set raw = states(ent) %}
        {% if domain == 'number' and raw not in ['unknown', 'unavailable', ''] %}
          {% set val = raw | float if '.' in raw else raw | int %}
        {% else %}
          {% set val = raw %}
        {% endif %}
        {% set d = d | combine({ key: val }) %}
      {% endif %}
    {% endfor %}
    {{ d }}

  # Parse overrides YAML (if any), then merge (overrides win)
  overrides: >-
    {% set o = {} %}
    {% if overrides_yaml|trim %}
      {% set parsed = overrides_yaml | from_yaml %}
      {% if parsed is mapping %}
        {% set o = parsed %}
      {% endif %}
    {% endif %}
    {{ o }}

  desired_common: >-
    {{ defaults_from_reference | combine(overrides, recursive=True) }}

sequence:
  - variables:
      # Cut to first 20 devices
      devices_20: >-
        {{ (tgt_devs or [])[:20] }}

  - choose:
      - conditions: "{{ devices_20|length == 0 }}"
        sequence:
          - action: logbook.log
            data:
              name: "Inovelli Config"
              message: "No target devices selected; nothing to do."
    default:
      - repeat:
          for_each: "{{ devices_20 }}"
          sequence:
            - variables:
                dev_id: "{{ repeat.item }}"
                dev_name: >-
                  {{ device_attr(dev_id, 'name') or device_attr(dev_id, 'name_by_user') or dev_id }}
                txn_base: "{{ dev_name ~ '_' ~ (now().timestamp()|int) }}"

            # ---------------- Reporting via MQTT (only here) ----------------
            - choose:
                - conditions: "{{ send_reporting }}"
                  sequence:
                    # disable reporting
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "genOnOff",
                            "attribute": "onOff", "minimum_report_interval": 0,
                            "maximum_report_interval": 65535, "reportable_change": 0,
                            "transaction": txn_base ~ "_onoff_disable"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "genLevelCtrl",
                            "attribute": "currentLevel", "minimum_report_interval": 0,
                            "maximum_report_interval": 65535, "reportable_change": 1,
                            "transaction": txn_base ~ "_level_disable"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "manuSpecificInovelli",
                            "attribute": "defaultLevelLocal", "minimum_report_interval": 0,
                            "maximum_report_interval": 65535, "reportable_change": 1,
                            "transaction": txn_base ~ "_dll_disable"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "manuSpecificInovelli",
                            "attribute": "defaultLevelRemote", "minimum_report_interval": 0,
                            "maximum_report_interval": 65535, "reportable_change": 1,
                            "transaction": txn_base ~ "_dlr_disable"
                          } | tojson }}

                    # set reporting with sane intervals
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "genOnOff",
                            "attribute": "onOff", "minimum_report_interval": 0,
                            "maximum_report_interval": rpt_max, "reportable_change": 0,
                            "transaction": txn_base ~ "_onoff_set"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "genLevelCtrl",
                            "attribute": "currentLevel", "minimum_report_interval": rpt_min,
                            "maximum_report_interval": rpt_max, "reportable_change": 1,
                            "transaction": txn_base ~ "_level_set"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "manuSpecificInovelli",
                            "attribute": "defaultLevelLocal", "minimum_report_interval": 0,
                            "maximum_report_interval": rpt_max, "reportable_change": 1,
                            "transaction": txn_base ~ "_dll_set"
                          } | tojson }}
                    - action: mqtt.publish
                      data:
                        topic: zigbee2mqtt/bridge/request/device/configure_reporting
                        payload: >-
                          {{ {
                            "id": dev_name, "endpoint": 1, "cluster": "manuSpecificInovelli",
                            "attribute": "defaultLevelRemote", "minimum_report_interval": 0,
                            "maximum_report_interval": rpt_max, "reportable_change": 1,
                            "transaction": txn_base ~ "_dlr_set"
                          } | tojson }}

            # ---------------- Push config via entities (actions) -------------
            - choose:
                - conditions: "{{ push_parameters }}"
                  sequence:
                    # Iterate base params
                    - repeat:
                        for_each: "{{ all_params }}"
                        sequence:
                          - variables:
                              key: "{{ repeat.item[0] }}"
                              domain: "{{ repeat.item[1] }}"
                              suffix: "{{ repeat.item[2] }}"
                              ent: >-
                                {{ find_entity(dev_id, domain, suffix) }}
                              desired: "{{ desired_common[key] if key in desired_common else none }}"
                          - choose:
                              - conditions: >-
                                  {{ ent is not none and desired is not none and domain == 'number' }}
                                sequence:
                                  - action: number.set_value
                                    target:
                                      entity_id: "{{ ent }}"
                                    data:
                                      value: "{{ desired }}"
                              - conditions: >-
                                  {{ ent is not none and desired is not none and domain == 'select' }}
                                sequence:
                                  - action: select.select_option
                                    target:
                                      entity_id: "{{ ent }}"
                                    data:
                                      option: "{{ desired }}"

            # ---------------- Log summary -----------------------------------
            - action: logbook.log
              data:
                name: "Inovelli Config"
                message: >-
                  {{ dev_name }}: reporting={{ send_reporting }}, parameters={{ push_parameters }} applied.

