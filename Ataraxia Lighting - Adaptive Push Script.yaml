# =============================================================================
# Changelog
# v1.0 (current)
# - Removed level_config and color_options. These seem to be persistent.
# =============================================================================

blueprint:
  name: Ataraxia Lighting - Adaptive Push Script (v1.0rc5)
  domain: script
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/refs/heads/main/Ataraxia%20Lighting%20-%20Adaptive%20Push%20Script.yaml
  author: mnestrud
  description: >
    Syncs Adaptive Lighting values to Inovelli switches and/or Zigbee2MQTT light
    groups. Skips MQTT publishes when targets already match. Optional HA entity
    inputs enable precise comparisons. Delay before group publish runs only if
    the Inovelli publish ran.

  input:
    al_switch:
      name: Adaptive Lighting switch
      description: >
        Adaptive Lighting dummy switch entity. Provides brightness_pct and
        color_temp_kelvin attributes.
      selector:
        entity:
          domain: switch

    inovelli_set_topic:
      name: Inovelli switch MQTT topic
      description: >
        Zigbee2MQTT `/set` topic for the Inovelli Blue switch.
        Example: "zigbee2mqtt/Primary Bedroom Overhead Light Switch/set".
        Leave blank to disable Inovelli publishing.
      default: ""
      selector:
        text:

    group_set_topic:
      name: Light group / light MQTT topic
      description: >
        Zigbee2MQTT `/set` topic for a light group or individual light.
        Example: "zigbee2mqtt/zgb_primary_bedroom/set".
        Leave blank to disable group publishing.
      default: ""
      selector:
        text:

    # === Optional (recommended for "already correct?" checks) ===
    inovelli_entity:
      name: Inovelli HA entity
      description: >
        Home Assistant entity representing the Inovelli switch/light.
        Used to compare current brightness & default levels.
        Leave blank to skip state checks (always publishes).
      default: ""
      selector:
        entity:
          multiple: false
          domain: light

    group_light_entity:
      name: Light group HA entity
      description: >
        Home Assistant light group (or single light). Used to compare current
        brightness & color temperature. Leave blank to skip state checks
        (always publishes).
      default: ""
      selector:
        entity:
          multiple: false
          domain: light

    inovelli_group_delay:
      name: "Inovelli → Group publish delay (s)"
      description: "Delay between Inovelli publish and group publish when both need updates."
      default: 0.5
      selector:
        number:
          min: 0
          max: 5
          step: 0.1
          mode: slider

# ---------- Script body ----------
alias: AL Bedroom Overhead
mode: single

fields:
  target_state:
    description: >
      Target power state ("ON" or "OFF"). Required: ensures devices
      turn on/off as expected.
    example: "ON"

  brightness_pct:
    description: >
      Optional brightness percent (0–100). If omitted, falls back to brightness
      from the Adaptive Lighting switch.
    example: 72

  color_temp_kelvin:
    description: >
      Optional color temperature in Kelvin. If omitted, falls back to the
      Adaptive Lighting switch value.
    example: 2700

sequence:
  - variables:
      # === Blueprint inputs ===
      al_sw: !input al_switch
      inovelli_topic: !input inovelli_set_topic
      group_topic: !input group_set_topic
      inovelli_ent: !input inovelli_entity
      group_ent: !input group_light_entity

      # === Adapted brightness / color temp values ===
      pct: >-
        {% set p = brightness_pct | default(None) %}
        {% if p is number %}{{ p | int }}
        {% else %}{{ state_attr(al_sw,'brightness_pct') | int(50) }}
        {% endif %}

      kelvin: >-
        {% set k = color_temp_kelvin | default(None) %}
        {% if k is number %}{{ k | float }}
        {% else %}{{ state_attr(al_sw,'color_temp_kelvin') | float(2700) }}
        {% endif %}

      bri_raw: "{{ (pct * 254 / 100) | round(0) | int }}"
      bri: "{{ [ [ bri_raw, 1 ] | max, 254 ] | min }}"
      mired_raw: "{{ (1000000 / kelvin) | round(0) | int }}"
      mired: "{{ [ [ mired_raw, 153 ] | max, 500 ] | min }}"

      # === Normalized states for payloads ===
      target_state_norm: "{{ target_state | upper }}"
      state_for_inovelli: "{{ 'ON' if target_state_norm == 'ON' else 'OFF' }}"
      state_for_lights: "{{ target_state_norm if target_state_norm == 'ON' else None }}"

      # ---------- Current values for "already correct?" checks ----------
      # Inovelli (check brightness and defaults)
      _inv_bri: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'brightness')
             | default(state_attr(inovelli_ent, 'brightness_pct'), true) }}
        {% else %}{{ None }}{% endif %}

      _inv_dll: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'defaultLevelLocal')
             | default(state_attr(inovelli_ent, 'default_level_local'), true) }}
        {% else %}{{ None }}{% endif %}

      _inv_dlr: >-
        {% if inovelli_ent | string | length > 0 %}
          {{ state_attr(inovelli_ent, 'defaultLevelRemote')
             | default(state_attr(inovelli_ent, 'default_level_remote'), true) }}
        {% else %}{{ None }}{% endif %}

      # Normalize brightness scale (HA % → Z2M 0–254 if needed)
      inv_bri_norm: >-
        {% set v = _inv_bri %}
        {% if v is number and v <= 1 %}
          {{ (v * 254) | round(0) | int }}
        {% elif v is number and v <= 100 and v == v | int %}
          {{ (v * 254 / 100) | round(0) | int }}
        {% else %}{{ v }}{% endif %}

      # Check: all three match → skip Inovelli publish
      inovelli_already_correct: >-
        {% if inovelli_ent | string | length == 0 %}
          false
        {% else %}
          {{
            (inv_bri_norm is number and inv_bri_norm == bri) and
            (_inv_dll is number and _inv_dll == bri) and
            (_inv_dlr is number and _inv_dlr == bri)
          }}
        {% endif %}

      # Group/light current values
      grp_bri: >-
        {% if group_ent | string | length > 0 %}
          {{ state_attr(group_ent, 'brightness') }}
        {% else %}{{ None }}{% endif %}

      grp_ct: >-
        {% if group_ent | string | length > 0 %}
          {{ state_attr(group_ent, 'color_temp') }}
        {% else %}{{ None }}{% endif %}

      # Check: brightness + color_temp match → skip group publish
      group_already_correct: >-
        {% if group_ent | string | length == 0 %}
          false
        {% else %}
          {{
            (grp_bri is number and grp_bri == bri) and
            (grp_ct  is number and grp_ct  == mired)
          }}
        {% endif %}

  # Early exit if *both* are already correct
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ inovelli_already_correct and group_already_correct }}"
        sequence:
          - stop: "Adaptive Push: No changes needed"

  # ---------- Actions ----------
  # Publish to Inovelli only if topic is non-blank AND values are not already correct
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (inovelli_topic | string | trim) | length > 0 }}"
          - condition: template
            value_template: "{{ not inovelli_already_correct }}"
        sequence:
          - action: mqtt.publish
            data:
              topic: "{{ inovelli_topic }}"
              qos: 0
              retain: false
              payload: >-
                {
                  "brightness": {{ bri }},
                  "defaultLevelLocal": {{ bri }},
                  "defaultLevelRemote": {{ bri }},
                  "state": "{{ state_for_inovelli }}"
                }

  # If we did the Inovelli publish and the group also needs an update, wait a bit
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ not inovelli_already_correct and not group_already_correct }}"
        sequence:
          - delay:
              seconds: !input inovelli_group_delay

  # Publish to Zigbee2MQTT group only if topic is non-blank AND values are not already correct
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (group_topic | string | trim) | length > 0 }}"
          - condition: template
            value_template: "{{ not group_already_correct }}"
        sequence:
          - action: mqtt.publish
            data:
              topic: "{{ group_topic }}"
              qos: 0
              retain: false
              payload: >-
                {
                  "state": "{{ state_for_inovelli }}",
                  "brightness": {{ bri }},
                  "color_temp": {{ mired }}
                }




