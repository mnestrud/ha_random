blueprint:
  name: Ataraxia Lighting - Inovelli Switch Taps – Lights, Shades & LED (v0.6)
  description: >
    Inovelli Blue 2-in-1 (Zigbee2MQTT) multi-tap blueprint.
    - Config single = Night (only if light_group provided)
    - Config double = Day (only if light_group provided)
    - Up single / Down single = Adaptive Lighting (turn ON helper if OFF; 0.5s delay; run script only on that transition)
    - Up/Down held = Stop Adaptive (turn helper OFF)
    - Up double / Down double / Up triple = optional Shade scenes (auto LED).
      If selected covers are moving, the tap will STOP them instead.
    - Battery-aware LED on shade taps: if ANY selected cover's battery sensor is below the threshold, LED color switches to Red.

    Notes:
    • Uses Home Assistant 2024.8+ “actions” style.
    • Shade scenes are optional; if left blank, that key press does nothing (no scene, no LED).
    • Adaptive is enabled ONLY if BOTH 'adaptive_helper' and 'adaptive_script' are set.

  domain: automation
  author: mnestrud
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/main/Ataraxia%20Inovelli%20Switch%20Automations
  homeassistant:
    min_version: 2024.8.0

  input:
    inovelli_device:
      name: Inovelli switch (Zigbee2MQTT)
      description: Select the Inovelli Blue 2-in-1 controlling this room.
      selector:
        device:
          filter:
            - integration: mqtt
          multiple: false

    light_group:
      name: Target light / Zigbee group
      description: >
        Optional: If set, Config single/double applies Night/Day brightness & color temp.
        If left blank, those button presses are disabled.
      default: []
      selector:
        entity:
          domain: light

    day_brightness:
      name: Daytime brightness (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          mode: slider
          unit_of_measurement: "%"

    day_color_temp_k:
      name: Daytime color temperature (K)
      default: 4000
      selector:
        number:
          min: 2000
          max: 6500
          step: 50
          unit_of_measurement: "K"

    night_brightness:
      name: Nighttime brightness (%)
      default: 20
      selector:
        number:
          min: 1
          max: 100
          mode: slider
          unit_of_measurement: "%"

    night_color_temp_k:
      name: Nighttime color temperature (K)
      default: 2700
      selector:
        number:
          min: 1800
          max: 4000
          step: 50
          unit_of_measurement: "K"

    day_transition:
      name: Day transition (seconds)
      description: Smoother fade when applying Day settings.
      default: 0.4
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: s

    night_transition:
      name: Night transition (seconds)
      description: Smoother fade when applying Night settings.
      default: 0.4
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: s

    adaptive_helper:
      name: Adaptive Lighting helper (input_boolean)
      description: Must be set together with Adaptive script; otherwise adaptive is disabled.
      default: []
      selector:
        entity:
          filter:
            domain: input_boolean

    adaptive_script:
      name: Adaptive script to call
      description: Must be set together with Adaptive helper; otherwise adaptive is disabled. Accepts 'target_state' "ON"/"OFF".
      default: []
      selector:
        entity:
          filter:
            domain: script

    # Shade scenes — if left blank, that key press does nothing (and no LED effect)
    shade_up_scene:
      name: Shade UP scene (Up double)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    shade_down_scene:
      name: Shade DOWN scene (Down double)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    shade_shady_scene:
      name: Shade “Shady” scene (Up triple)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    # LED EFFECTS (auto-run when corresponding shade scene is set)
    led_script:
      name: Inovelli LED effect script
      description: "Direct call to your LED script (must accept: led, color, level, effect, duration, target)."
      default: script.inovelli_blue_led_2025_1
      selector:
        entity:
          filter:
            domain: script

    led_color:
      name: LED color when batteries are OK
      default: Pink
      selector:
        text:

    led_level:
      name: LED level (1-100)
      default: 100
      selector:
        number:
          min: 1
          max: 100

    led_duration:
      name: LED duration (e.g., "10 Seconds")
      default: 10 Seconds
      selector:
        text:

    battery_low_threshold:
      name: Battery low threshold (%)
      default: 30
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    # Covers for stop-if-moving and battery LED override (select up to ~4)
    shade_covers:
      name: Covers to manage (stop & battery check)
      description: >
        Select up to 4 cover entities controlled by these taps.
        • If any selected cover is opening/closing when a shade tap is pressed, the tap will send cover.stop_cover.
        • LED will turn Red on shade taps if any selected cover's battery sensor is below the threshold.
      default: []
      selector:
        entity:
          domain: cover
          multiple: true

variables:
  # Inputs
  inovelli_device_var: !input inovelli_device
  light_group_var: !input light_group

  adaptive_helper_var: !input adaptive_helper
  adaptive_script_var: !input adaptive_script

  shade_up_scene_var: !input shade_up_scene
  shade_down_scene_var: !input shade_down_scene
  shade_shady_scene_var: !input shade_shady_scene

  led_script_var: !input led_script
  led_color_var: !input led_color
  led_level_var: !input led_level
  led_duration_var: !input led_duration

  battery_low_threshold_var: !input battery_low_threshold

  shade_covers_var: !input shade_covers

  # Derived targets / guards
  inovelli_led_light: >
    {{ device_entities(inovelli_device_var)
       | select('match', '^light\\.')
       | list | first }}

  adaptive_enabled: >
    {{ adaptive_helper_var != [] and adaptive_script_var != [] }}

  daynight_enabled: >
    {{ light_group_var != [] }}

  shade_up_enabled: >
    {{ shade_up_scene_var != [] }}

  shade_down_enabled: >
    {{ shade_down_scene_var != [] }}

  shade_shady_enabled: >
    {{ shade_shady_scene_var != [] }}

  # Limit covers list to the first 4
  shade_covers_4: >
    {{ (shade_covers_var | list)[:4] }}

  can_stop_shades: >
    {{ (shade_covers_4 | length) > 0 }}

  shades_moving: >
    {% set moving = false %}
    {% for c in shade_covers_4 %}
      {% if states(c) in ['opening','closing'] %}
        {% set moving = true %}
      {% endif %}
    {% endfor %}
    {{ moving }}

  # Derive battery sensors from the selected covers (same device, device_class=battery)
  battery_entities: >
    {% set out = [] %}
    {% for c in shade_covers_4 %}
      {% set did = device_id(c) %}
      {% if did %}
        {% for e in device_entities(did) %}
          {% if e.startswith('sensor.') and state_attr(e, 'device_class') == 'battery' %}
            {% set out = out + [e] %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {{ out }}

  # Lowest battery % across provided sensors (101 if none/unknown)
  lowest_battery_pct: >
    {% set minv = 101 %}
    {% for e in battery_entities %}
      {% set v = states(e) | float(101) %}
      {% if v < minv %}{% set minv = v %}{% endif %}
    {% endfor %}
    {{ minv }}

  led_color_effective: >
    {% set threshold = battery_low_threshold_var | int(30) %}
    {{ 'Red' if (lowest_battery_pct | float(101)) < threshold else led_color_var }}

triggers:
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_single
    id: SCENE_NIGHT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_double
    id: SCENE_DAY

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_single
    id: ADAPT_LIVE

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_single
    id: ADAPT_PRESTAGE

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_held
    id: STOP_ADAPT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_held
    id: STOP_ADAPT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_double
    id: SHADES_UP

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_double
    id: SHADES_DOWN

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_triple
    id: SHADES_SHADY

conditions: []

actions:
  - choose:

      # ========== CONFIG BUTTON: DAY/NIGHT (only if light_group provided) ==========
      - conditions:
          - condition: trigger
            id: SCENE_DAY
        sequence:
          - if:
              - condition: template
                value_template: "{{ daynight_enabled }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target:
                      entity_id: !input adaptive_helper
              - action: light.turn_on
                target:
                  entity_id: !input light_group
                data:
                  brightness_pct: !input day_brightness
                  color_temp_kelvin: !input day_color_temp_k
                  transition: !input day_transition
            else: []

      - conditions:
          - condition: trigger
            id: SCENE_NIGHT
        sequence:
          - if:
              - condition: template
                value_template: "{{ daynight_enabled }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target:
                      entity_id: !input adaptive_helper
              - action: light.turn_on
                target:
                  entity_id: !input light_group
                data:
                  brightness_pct: !input night_brightness
                  color_temp_kelvin: !input night_color_temp_k
                  transition: !input night_transition
            else: []

      # ========== ADAPTIVE: LIVE / PRESTAGE / STOP (variables-first) ==========
      - conditions:
          - condition: trigger
            id:
              - ADAPT_LIVE
              - ADAPT_PRESTAGE
              - STOP_ADAPT
        sequence:
          - if:
              - condition: template
                value_template: "{{ adaptive_enabled }}"
            then:
              - choose:
                  # LIVE/PRESTAGE: only if helper is OFF → turn ON, delay 0.5s, then run script once
                  - conditions:
                      - condition: template
                        value_template: "{{ trigger.id in ['ADAPT_LIVE','ADAPT_PRESTAGE'] and is_state(adaptive_helper_var, 'off') }}"
                    sequence:
                      - action: input_boolean.turn_on
                        target:
                          entity_id: !input adaptive_helper
                      - delay:
                          milliseconds: 500
                      - choose:
                          - conditions:
                              - condition: trigger
                                id: ADAPT_LIVE
                            sequence:
                              - action: script.turn_on
                                target:
                                  entity_id: !input adaptive_script
                                data:
                                  variables:
                                    target_state: "ON"
                          - conditions:
                              - condition: trigger
                                id: ADAPT_PRESTAGE
                            sequence:
                              - action: script.turn_on
                                target:
                                  entity_id: !input adaptive_script
                                data:
                                  variables:
                                    target_state: "OFF"

                  # LIVE/PRESTAGE while helper already ON → do nothing
                  - conditions:
                      - condition: template
                        value_template: "{{ trigger.id in ['ADAPT_LIVE','ADAPT_PRESTAGE'] and is_state(adaptive_helper_var, 'on') }}"
                    sequence: []

                  # STOP: always turn helper OFF
                  - conditions:
                      - condition: trigger
                        id: STOP_ADAPT
                    sequence:
                      - action: input_boolean.turn_off
                        target:
                          entity_id: !input adaptive_helper
            else: []

      # ========== SHADES (SCENES) + AUTO LED EFFECTS + STOP-IF-MOVING ==========
      - conditions:
          - condition: trigger
            id:
              - SHADES_UP
              - SHADES_DOWN
              - SHADES_SHADY
        sequence:
          # UP double
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_UP' and shade_up_enabled }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ can_stop_shades and shades_moving }}"
                    then:
                      - action: cover.stop_cover
                        target:
                          entity_id: !input shade_covers
                    else:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: "{{ led_color_effective }}"
                          level: "{{ led_level_var }}"
                          effect: "Slow Rising"
                          duration: "{{ led_duration_var }}"
                          target:
                            entity_id: "{{ inovelli_led_light }}"
                      - action: scene.turn_on
                        target:
                          entity_id: !input shade_up_scene

              # DOWN double
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_DOWN' and shade_down_enabled }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ can_stop_shades and shades_moving }}"
                    then:
                      - action: cover.stop_cover
                        target:
                          entity_id: !input shade_covers
                    else:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: "{{ led_color_effective }}"
                          level: "{{ led_level_var }}"
                          effect: "Slow Falling"
                          duration: "{{ led_duration_var }}"
                          target:
                            entity_id: "{{ inovelli_led_light }}"
                      - action: scene.turn_on
                        target:
                          entity_id: !input shade_down_scene

              # UP triple (“Shady”)
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_SHADY' and shade_shady_enabled }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ can_stop_shades and shades_moving }}"
                    then:
                      - action: cover.stop_cover
                        target:
                          entity_id: !input shade_covers
                    else:
                      - action: !input led_script
                        data:
                          led: "All"
                          color: "{{ led_color_effective }}"
                          level: "{{ led_level_var }}"
                          effect: "Pulse"
                          duration: "{{ led_duration_var }}"
                          target:
                            entity_id: "{{ inovelli_led_light }}"
                      - action: scene.turn_on
                        target:
                          entity_id: !input shade_shady_scene

mode: queued
max: 3
