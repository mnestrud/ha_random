blueprint:
  name: Ataraxia Lighting - Inovelli Switch Taps (v0.8.1+fix2)
  description: >
    Inovelli Blue 2-in-1 (Zigbee2MQTT) multi-tap blueprint.
    - Config single = Night (only if a Light target is provided)
    - Config double = Day (only if a Light target is provided)
    - Up single / Down single = Adaptive Lighting (turn ON helper if OFF; 0.5s delay; run script only on that transition)
    - Up/Down held = Stop Adaptive (turn helper OFF)
    - Up double / Down double / Up triple / Down triple = optional Shade scenes (auto LED with battery-aware color)

    Notes:
    • Uses Home Assistant 2024.8+ “actions” style (service calls are now actions).
    • Shade scenes are optional; if left blank, that key press does nothing (no scene, no LED).
    • Adaptive is enabled ONLY if BOTH 'Adaptive helper' and 'Adaptive script' are set.
    • Shade LED color switches to Red when ANY provided battery sensor is at/below the low threshold.
    • Optional system log line can be enabled to show parsed values and decision.

  domain: automation
  author: mnestrud (mods by Home Assistant Assistant)
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/main/Ataraxia%20Inovelli%20Switch%20Automations
  homeassistant:
    min_version: 2024.8.0

  input:

    # ---- Switch
    inovelli_device:
      name: Inovelli switch (Zigbee2MQTT)
      description: Select the Inovelli Blue 2-in-1 controlling this room.
      selector:
        device:
          filter:
            - integration: mqtt
          multiple: false

    # ---- Lights
    light_group:
      name: Light target (single light or Zigbee group)
      description: >
        Optional: If set, Config single/double applies Night/Day brightness & color temp.
        If left blank, those button presses are disabled.
      default: []
      selector:
        entity:
          domain: light

    day_brightness:
      name: Daytime brightness (%)
      default: 80
      selector:
        number:
          min: 1
          max: 100
          mode: slider
          unit_of_measurement: "%"

    day_color_temp_k:
      name: Daytime color temperature (K)
      default: 4000
      selector:
        number:
          min: 2000
          max: 6500
          step: 50
          unit_of_measurement: "K"

    night_brightness:
      name: Nighttime brightness (%)
      default: 20
      selector:
        number:
          min: 1
          max: 100
          mode: slider
          unit_of_measurement: "%"

    night_color_temp_k:
      name: Nighttime color temperature (K)
      default: 2700
      selector:
        number:
          min: 1800
          max: 4000
          step: 50
          unit_of_measurement: "K"

    day_transition:
      name: Day transition (seconds)
      description: Smoother fade when applying Day settings.
      default: 0.4
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: s

    night_transition:
      name: Night transition (seconds)
      description: Smoother fade when applying Night settings.
      default: 0.4
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: s

    # ---- Adaptive Lighting
    adaptive_helper:
      name: Adaptive helper (input_boolean)
      description: Must be set together with Adaptive script; otherwise adaptive is disabled.
      default: []
      selector:
        entity:
          filter:
            domain: input_boolean

    adaptive_script:
      name: Adaptive script
      description: Must be set together with Adaptive helper; otherwise adaptive is disabled. Accepts 'target_state' "ON"/"OFF".
      default: []
      selector:
        entity:
          filter:
            domain: script

    # ---- Shades (Scenes)
    shade_scene_up:
      name: Shade UP scene (Up double)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    shade_scene_down:
      name: Shade DOWN scene (Down double)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    shade_scene_shady:
      name: Shade “Shady” scene (Up triple)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    shade_scene_down_triple:
      name: Shade DOWN-TRIPLE scene (Down triple)
      default: []
      selector:
        entity:
          filter:
            domain: scene

    # ---- LED effects
    led_script:
      name: Inovelli LED effect script
      description: "Direct call to your LED script (must accept: led, color, level, effect, duration, target)."
      default: script.inovelli_blue_led_2025_1
      selector:
        entity:
          filter:
            domain: script

    led_color:
      name: LED color when batteries are OK
      default: Pink
      selector:
        text:

    led_level:
      name: LED level (1-100)
      default: 100
      selector:
        number:
          min: 1
          max: 100

    led_duration:
      name: LED duration (e.g., "10 Seconds")
      default: 10 Seconds
      selector:
        text:

    # ---- Battery-aware LED (direct battery sensors)
    battery_low_threshold:
      name: Battery low threshold (%)
      default: 30
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    battery_sensor_1:
      name: Battery sensor 1 (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: battery

    battery_sensor_2:
      name: Battery sensor 2 (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: battery

    battery_sensor_3:
      name: Battery sensor 3 (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: battery

    battery_sensor_4:
      name: Battery sensor 4 (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: battery

    # ---- Optional debug logging
    enable_debug_logging:
      name: Enable system log line (debug)
      description: Writes a line to the system log showing parsed battery values, lowest value, threshold, and chosen LED color on SHADES triggers.
      default: false
      selector:
        boolean:

variables:
  # ---- Direct inputs
  switch_device: !input inovelli_device
  light_target: !input light_group

  adaptive_helper_entity: !input adaptive_helper
  adaptive_script_entity: !input adaptive_script

  scene_up: !input shade_scene_up
  scene_down: !input shade_scene_down
  scene_shady: !input shade_scene_shady
  scene_down_triple: !input shade_scene_down_triple

  led_script_entity: !input led_script
  led_color_ok: !input led_color
  led_level_pct: !input led_level
  led_duration_text: !input led_duration

  battery_low_pct: !input battery_low_threshold
  battery_sensor_1_entity: !input battery_sensor_1
  battery_sensor_2_entity: !input battery_sensor_2
  battery_sensor_3_entity: !input battery_sensor_3
  battery_sensor_4_entity: !input battery_sensor_4

  debug_enabled: !input enable_debug_logging

  # ---- Derived
  led_target_light: >
    {{ device_entities(switch_device)
       | select('match', '^light\\.')
       | list | first }}

  is_adaptive_enabled: >
    {{ adaptive_helper_entity != [] and adaptive_script_entity != [] }}

  has_light_target: >
    {{ light_target != [] }}

  scene_up_set: >
    {{ scene_up != [] }}

  scene_down_set: >
    {{ scene_down != [] }}

  scene_shady_set: >
    {{ scene_shady != [] }}

  scene_down_triple_set: >
    {{ scene_down_triple != [] }}

  battery_sensors: >
    {{ [battery_sensor_1_entity, battery_sensor_2_entity, battery_sensor_3_entity, battery_sensor_4_entity]
       | reject('equalto', []) | list }}

  # ---- Battery parsing (robust)
  # Build list of numeric percentages from all provided sensors:
  battery_values: >
    {%- set sensors = battery_sensors -%}
    {%- set vals = [] -%}
    {%- for e in sensors %}
      {%- set raw = states(e) -%}
      {%- set v = raw | float(none) -%}
      {%- if v is none -%}
        {%- set v = state_attr(e, 'battery') | float(none) -%}
      {%- endif -%}
      {%- if v is none and raw is string -%}
        {%- set num = (raw | regex_findall_index('[-+]?[0-9]*\\.?[0-9]+') | default(none)) -%}
        {%- set v = num | float(none) -%}
      {%- endif -%}
      {%- if v is not none -%}
        {%- set _ = vals.append(v) -%}
      {%- endif -%}
    {%- endfor -%}
    {{ vals }}

  lowest_battery_pct: >
    {%- set vals = battery_values -%}
    {{ (vals | min) if (vals | count > 0) else 101 }}

  any_battery_low: >
    {%- set threshold = battery_low_pct | float(30) -%}
    {%- set vals = battery_values -%}
    {{ (vals | select('le', threshold) | list | count) > 0 }}

  led_color_resolved: >
    {{ 'Red' if any_battery_low else led_color_ok }}

triggers:
  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_single
    id: SCENE_NIGHT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: config_double
    id: SCENE_DAY

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_single
    id: ADAPT_LIVE

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_single
    id: ADAPT_PRESTAGE

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_held
    id: STOP_ADAPT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_held
    id: STOP_ADAPT

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_double
    id: SHADES_UP

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_double
    id: SHADES_DOWN

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: up_triple
    id: SHADES_SHADY

  - trigger: device
    domain: mqtt
    device_id: !input inovelli_device
    type: action
    subtype: down_triple
    id: SHADES_DOWN_TRIPLE

conditions: []

actions:
  - choose:

      # ========== CONFIG BUTTON: DAY ==========
      - conditions:
          - condition: trigger
            id: SCENE_DAY
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_light_target }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ is_adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target:
                      entity_id: !input adaptive_helper
              - action: light.turn_on
                target:
                  entity_id: !input light_group
                data:
                  brightness_pct: !input day_brightness
                  color_temp_kelvin: !input day_color_temp_k
                  transition: !input day_transition
            else: []

      # ========== CONFIG BUTTON: NIGHT ==========
      - conditions:
          - condition: trigger
            id: SCENE_NIGHT
        sequence:
          - if:
              - condition: template
                value_template: "{{ has_light_target }}"
            then:
              - if:
                  - condition: template
                    value_template: "{{ is_adaptive_enabled }}"
                then:
                  - action: input_boolean.turn_off
                    target:
                      entity_id: !input adaptive_helper
              - action: light.turn_on
                target:
                  entity_id: !input light_group
                data:
                  brightness_pct: !input night_brightness
                  color_temp_kelvin: !input night_color_temp_k
                  transition: !input night_transition
            else: []

      # ========== ADAPTIVE: LIVE / PRESTAGE / STOP ==========
      - conditions:
          - condition: trigger
            id:
              - ADAPT_LIVE
              - ADAPT_PRESTAGE
              - STOP_ADAPT
        sequence:
          - if:
              - condition: template
                value_template: "{{ is_adaptive_enabled }}"
            then:
              - choose:
                  # LIVE/PRESTAGE: only if helper is OFF → turn ON, delay 0.5s, then run script once
                  - conditions:
                      - condition: template
                        value_template: "{{ trigger.id in ['ADAPT_LIVE','ADAPT_PRESTAGE'] and is_state(adaptive_helper_entity, 'off') }}"
                    sequence:
                      - action: input_boolean.turn_on
                        target:
                          entity_id: !input adaptive_helper
                      - delay:
                          milliseconds: 500
                      - choose:
                          - conditions:
                              - condition: trigger
                                id: ADAPT_LIVE
                            sequence:
                              - action: script.turn_on
                                target:
                                  entity_id: !input adaptive_script
                                data:
                                  variables:
                                    target_state: "ON"
                          - conditions:
                              - condition: trigger
                                id: ADAPT_PRESTAGE
                            sequence:
                              - action: script.turn_on
                                target:
                                  entity_id: !input adaptive_script
                                data:
                                  variables:
                                    target_state: "OFF"

                  # LIVE/PRESTAGE while helper already ON → do nothing
                  - conditions:
                      - condition: template
                        value_template: "{{ trigger.id in ['ADAPT_LIVE','ADAPT_PRESTAGE'] and is_state(adaptive_helper_entity, 'on') }}"
                    sequence: []

                  # STOP: always turn helper OFF
                  - conditions:
                      - condition: trigger
                        id: STOP_ADAPT
                    sequence:
                      - action: input_boolean.turn_off
                        target:
                          entity_id: !input adaptive_helper
            else: []

      # ========== SHADES (SCENES) + AUTO LED (battery-aware) ==========
      - conditions:
          - condition: trigger
            id:
              - SHADES_UP
              - SHADES_DOWN
              - SHADES_SHADY
              - SHADES_DOWN_TRIPLE
        sequence:
          # Single debug line at start of SHADES sequence (fires for any branch)
          - if:
              - condition: template
                value_template: "{{ debug_enabled }}"
            then:
              - action: system_log.write
                data:
                  message: >
                    SHADES {{ trigger.id }}:
                    sensors={{ battery_sensors }},
                    values={{ battery_values }},
                    lowest={{ lowest_battery_pct }},
                    threshold={{ battery_low_pct }},
                    any_low={{ any_battery_low }},
                    color={{ led_color_resolved }}
                  level: info

          # Then branch to the matching scene
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_UP' and scene_up_set }}"
                sequence:
                  - action: !input led_script
                    data:
                      led: "All"
                      color: "{{ led_color_resolved }}"
                      level: "{{ led_level_pct }}"
                      effect: "Slow Rising"
                      duration: "{{ led_duration_text }}"
                      target:
                        entity_id: "{{ led_target_light }}"
                  - action: scene.turn_on
                    target:
                      entity_id: !input shade_scene_up

              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_DOWN' and scene_down_set }}"
                sequence:
                  - action: !input led_script
                    data:
                      led: "All"
                      color: "{{ led_color_resolved }}"
                      level: "{{ led_level_pct }}"
                      effect: "Slow Falling"
                      duration: "{{ led_duration_text }}"
                      target:
                        entity_id: "{{ led_target_light }}"
                  - action: scene.turn_on
                    target:
                      entity_id: !input shade_scene_down

              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_SHADY' and scene_shady_set }}"
                sequence:
                  - action: !input led_script
                    data:
                      led: "All"
                      color: "{{ led_color_resolved }}"
                      level: "{{ led_level_pct }}"
                      effect: "Chase"
                      duration: "{{ led_duration_text }}"
                      target:
                        entity_id: "{{ led_target_light }}"
                  - action: scene.turn_on
                    target:
                      entity_id: !input shade_scene_shady

              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'SHADES_DOWN_TRIPLE' and scene_down_triple_set }}"
                sequence:
                  - action: !input led_script
                    data:
                      led: "All"
                      color: "{{ led_color_resolved }}"
                      level: "{{ led_level_pct }}"
                      effect: "Chase"
                      duration: "{{ led_duration_text }}"
                      target:
                        entity_id: "{{ led_target_light }}"
                  - action: scene.turn_on
                    target:
                      entity_id: !input shade_scene_down_triple

mode: queued
max: 3
