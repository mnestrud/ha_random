blueprint:
  name: Ataraxia Lighting - Inovelli Blue Defaults (v1.06)
  description: >
    Apply consistent Inovelli Blue (and compatible) device defaults using direct
    Zigbee2MQTT `configure` commands.

    This version simplifies everything by:
      • Removing HA entity actions and replacing them with direct MQTT configure commands
      • Adding extended parameters (per-LED, relay click, quick start, etc.)
      • Applying Zigbee reporting settings
      • Publishing Z2M per-device options
      • Adding a configurable delay between MQTT publishes (default 0.5s)

    Author: mnestrud

  domain: script
  source_url: https://raw.githubusercontent.com/mnestrud/ha_random/refs/heads/main/Ataraxia%20Lighting%20-%20Inovelli%20Blue%20Defaults%20%2B%20Reporting%20Script%20Blueprint
  input:
    reference_device:
      name: Reference device
      description: Used as the source of parameter values when not overriding with hard-coded defaults.
      selector:
        device:
          filter:
            - integration: mqtt

    use_hardcoded_defaults:
      name: Override reference with hard coded defaults
      description: >
        If ON, ignores the reference device and uses the bundled defaults. OFF by default.
        With this ON, the script is valid even if no reference device is selected.
      default: false
      selector:
        boolean: {}

    send_reporting:
      name: Configure Switch State Reporting
      description: >
        If ON, applies reporting for on/off, level, and Inovelli-specific attributes,
        plus publishes Z2M device options.
      default: true
      selector:
        boolean: {}

    push_parameters:
      name: Configure Switch Options
      description: >
        If ON, sends either hard-coded defaults (if override is ON) or values read from the
        reference device directly to Zigbee2MQTT using configure commands.
      default: true
      selector:
        boolean: {}

    publish_delay:
      name: Delay between MQTT publishes
      description: >
        Time to wait between each mqtt.publish call, in seconds. Prevents flooding Z2M.
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5
          step: 0.1
          unit_of_measurement: seconds

    target_devices:
      name: Target devices
      description: Up to 20 devices to configure in one run.
      selector:
        device:
          multiple: true
          filter:
            - integration: mqtt
      default: []

mode: parallel
max: 50

variables:
  ref_dev: !input reference_device
  tgt_devs: !input target_devices
  send_reporting: !input send_reporting
  push_parameters: !input push_parameters
  use_hardcoded_defaults: !input use_hardcoded_defaults
  publish_delay: !input publish_delay

  rpt_min: 1
  rpt_max: 10800

  z2m_transition: 0.4
  z2m_state_action: false
  z2m_optimistic: true
  z2m_qos: 0

  hardcoded_defaults: >-
    {{
      {
        'dimmingSpeedUpRemote': 0,
        'dimmingSpeedUpLocal': 20,
        'rampRateOffToOnRemote': 0,
        'rampRateOffToOnLocal': 0,
        'dimmingSpeedDownRemote': 127,
        'dimmingSpeedDownLocal': 127,
        'minimumLevel': 1,
        'maximumLevel': 254,
        'invertSwitch': 'No',
        'autoTimerOff': 0,
        'stateAfterPowerRestored': 255,
        'loadLevelIndicatorTimeout': 'Stay On',
        'smartBulbMode': 'Smart Bulb Mode',
        'doubleTapUpToParam55': 'Disabled',
        'doubleTapDownToParam56': 'Disabled',
        'brightnessLevelForDoubleTapUp': 254,
        'brightnessLevelForDoubleTapDown': 1,
        'singleTapBehavior': 'Old Behavior',
        'buttonDelay': '300ms',
        'ledColorWhenOn': 170,
        'ledColorWhenOff': 170,
        'ledIntensityWhenOn': 33,
        'ledIntensityWhenOff': 1,
        'defaultLevelLocal': 251,
        'defaultLevelRemote': 251,
        'localProtection': 'Disabled',
        'bindingOffToOnSyncLevel': 'Disabled',
        'firmwareUpdateInProgressIndicator': 'Enabled',
        'fanControlMode': 'Disabled',
        'lowLevelForFanControlMode': 63,
        'onOffLedMode': 'All',
        'outputMode': 'Dimmer',
        'activeEnergyReports': 0,
        'activePowerReports': 0,
        'auxSwitchUniqueScenes': 'Disabled',
        'doubleTapClearNotifications': 'Disabled',
        'fanLedLevelType': 0,
        'highLevelForFanControlMode': 254,
        'higherOutputInNonNeutral': 'Disabled (default)',
        'ledBarScaling': 'Gen3 method (VZM-style)',
        'ledColorForFanControlMode': 255,
        'mediumLevelForFanControlMode': 128,
        'periodicPowerAndEnergyReports': 0,
        'quickStartLevel': 254,
        'quickStartTime': 0,
        'relayClick': 'Enabled (Click Sound Off)',
        'switchType': 'Single Pole',
        'defaultLed1ColorWhenOff': 255, 'defaultLed1ColorWhenOn': 255,
        'defaultLed1IntensityWhenOff': 101, 'defaultLed1IntensityWhenOn': 101,
        'defaultLed2ColorWhenOff': 255, 'defaultLed2ColorWhenOn': 255,
        'defaultLed2IntensityWhenOff': 101, 'defaultLed2IntensityWhenOn': 101,
        'defaultLed3ColorWhenOff': 255, 'defaultLed3ColorWhenOn': 255,
        'defaultLed3IntensityWhenOff': 101, 'defaultLed3IntensityWhenOn': 101,
        'defaultLed4ColorWhenOff': 255, 'defaultLed4ColorWhenOn': 255,
        'defaultLed4IntensityWhenOff': 101, 'defaultLed4IntensityWhenOn': 101,
        'defaultLed5ColorWhenOff': 255, 'defaultLed5ColorWhenOn': 255,
        'defaultLed5IntensityWhenOff': 101, 'defaultLed5IntensityWhenOn': 101,
        'defaultLed6ColorWhenOff': 255, 'defaultLed6ColorWhenOn': 255,
        'defaultLed6IntensityWhenOff': 101, 'defaultLed6IntensityWhenOn': 101,
        'defaultLed7ColorWhenOff': 255, 'defaultLed7ColorWhenOn': 255,
        'defaultLed7IntensityWhenOff': 101, 'defaultLed7IntensityWhenOn': 101
      }
    }}

  desired_common: >-
    {% if use_hardcoded_defaults %}
      {{ hardcoded_defaults }}
    {% else %}
      {{ {} }}
    {% endif %}

sequence:
  - variables:
      devices_20: >-
        {{ (tgt_devs or [])[:20] }}

  - repeat:
      for_each: "{{ devices_20 }}"
      sequence:
        - variables:
            dev_id: "{{ repeat.item }}"
            dev_name: >-
              {{ device_attr(dev_id, 'name') or device_attr(dev_id, 'name_by_user') or dev_id }}

        - choose:
            - conditions: "{{ send_reporting }}"
              sequence:
                - action: mqtt.publish
                  data:
                    topic: zigbee2mqtt/bridge/request/device/configure_reporting
                    payload: >-
                      {{
                        {
                          "id": dev_name,
                          "endpoint": 1,
                          "cluster": "genOnOff",
                          "attribute": "onOff",
                          "minimum_report_interval": 0,
                          "maximum_report_interval": rpt_max,
                          "reportable_change": 0
                        } | tojson
                      }}
                - delay: "{{ publish_delay }}"
                - action: mqtt.publish
                  data:
                    topic: zigbee2mqtt/bridge/request/device/configure_reporting
                    payload: >-
                      {{
                        {
                          "id": dev_name,
                          "endpoint": 1,
                          "cluster": "genLevelCtrl",
                          "attribute": "currentLevel",
                          "minimum_report_interval": rpt_min,
                          "maximum_report_interval": rpt_max,
                          "reportable_change": 1
                        } | tojson
                      }}
                - delay: "{{ publish_delay }}"
                - action: mqtt.publish
                  data:
                    topic: zigbee2mqtt/bridge/request/device/configure_reporting
                    payload: >-
                      {{
                        {
                          "id": dev_name,
                          "endpoint": 1,
                          "cluster": "manuSpecificInovelli",
                          "attribute": "defaultLevelLocal",
                          "minimum_report_interval": 0,
                          "maximum_report_interval": rpt_max,
                          "reportable_change": 1
                        } | tojson
                      }}
                - delay: "{{ publish_delay }}"
                - action: mqtt.publish
                  data:
                    topic: zigbee2mqtt/bridge/request/device/configure_reporting
                    payload: >-
                      {{
                        {
                          "id": dev_name,
                          "endpoint": 1,
                          "cluster": "manuSpecificInovelli",
                          "attribute": "defaultLevelRemote",
                          "minimum_report_interval": 0,
                          "maximum_report_interval": rpt_max,
                          "reportable_change": 1
                        } | tojson
                      }}
                - delay: "{{ publish_delay }}"
                - action: mqtt.publish
                  data:
                    topic: zigbee2mqtt/bridge/request/device/options
                    payload: >-
                      {{
                        {
                          "id": dev_name,
                          "options": {
                            "transition": z2m_transition,
                            "state_action": z2m_state_action,
                            "optimistic": z2m_optimistic,
                            "qos": z2m_qos
                          }
                        } | tojson
                      }}
                - delay: "{{ publish_delay }}"

        - choose:
            - conditions: "{{ push_parameters }}"
              sequence:
                - repeat:
                    for_each: "{{ desired_common.items()|list }}"
                    sequence:
                      - action: mqtt.publish
                        data:
                          topic: zigbee2mqtt/bridge/request/device/configure
                          payload: >-
                            {{
                              {
                                "id": dev_name,
                                "data": { repeat.item[0]: repeat.item[1] }
                              } | tojson
                            }}
                      - delay: "{{ publish_delay }}"
